var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { checkUserProperty } from "../../utils/checkers/myRestaurants.js";
import User from "../../models/User.js";
import mongoose from "mongoose";
export const getMyRestaurants = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f;
    const { userId } = req;
    const result = yield User.aggregate([
        // search user restaurants by his id string converted to ObjectId for mongo
        { $match: { _id: new mongoose.Types.ObjectId(userId) } },
        // i choose to challenge myself by using more nested collections, and to get vals from another collections we use first: the local field is the fields that we keep as ref for that other collection documents we want , so  for user i have an arr of ref id in restaurants key, but from point of view of each restaurant, he has just just a simple _id that for him is the one generated by mongoose but for us, the id with we update the user arr for each create or delete
        {
            $lookup: {
                from: "restaurants",
                localField: "restaurants",
                foreignField: "_id",
                as: "restaurants",
            },
        },
        // with unwind we can process each el similar to a map in js
        { $unwind: "$restaurants" },
        // we add necessary fields here to not do it in frontend and get values already processed
        {
            $lookup: {
                from: "dishes",
                localField: "restaurants.dishes",
                foreignField: "_id",
                as: "restaurants.dishes",
            },
        },
        {
            $addFields: {
                "restaurants.dishesCount": { $size: "$restaurants.dishes" },
            },
        },
        {
            $lookup: {
                from: "orders",
                localField: "restaurants.orders",
                foreignField: "_id",
                as: "restaurants.orders",
            },
        },
        {
            $addFields: {
                "restaurants.ordersCount": { $size: "$restaurants.orders" },
            },
        },
        {
            $lookup: {
                from: "reviews",
                localField: "restaurants.reviews",
                foreignField: "_id",
                as: "restaurants.reviews",
            },
        },
        {
            $addFields: {
                "restaurants.reviewsCount": { $size: "$restaurants.reviews" },
            },
        },
        // make our operations of sorting before group cause after is not possible modifying their order
        { $sort: { "restaurants.createdAt": -1 } },
        // after unwind we need an array of els again cause is easier to work with
        {
            $group: {
                _id: "$_id",
                restaurants: { $push: "$restaurants" },
            },
        },
        // facet runs multiples query in parallel so is pretty fast but they must be independent one by other
        {
            $facet: {
                paginatedRes: [
                    {
                        $project: {
                            restaurants: 1,
                            _id: 0,
                        },
                    },
                ],
                // we will need it for pagination in frontend
                totCount: [
                    {
                        $count: "count",
                    },
                ],
            },
        },
    ]);
    // most of cases $ is used for dynamic fields, to access property of obj and create new fields
    const nHits = (_c = (_b = (_a = result[0]) === null || _a === void 0 ? void 0 : _a.totCount) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.count;
    const restaurants = (_f = (_e = (_d = result[0]) === null || _d === void 0 ? void 0 : _d.paginatedRes) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.restaurants;
    if (!nHits)
        return res
            .status(200)
            .json({ success: true, restaurants: [], totRestaurants: 0 });
    return res.status(200).json({
        success: true,
        restaurants,
        totRestaurants: nHits,
    });
});
export const getMySingleRestaurant = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { user, restaurant } = yield checkUserProperty(req, res);
    if ([user, restaurant].some((el) => !el))
        return;
    return res.status(200).json({ success: true, restaurant });
});

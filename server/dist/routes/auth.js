"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const asyncWrapper_1 = require("../middleware/general/asyncWrapper");
const makeLimiter_1 = require("../utils/makeLimiter");
const validateRegister_1 = require("../middleware/auth/validateRegister");
const validateLogin_1 = require("../middleware/auth/validateLogin");
const validatorVerify_1 = require("../middleware/auth/validatorVerify");
const validatorRecoverPwd_1 = require("../middleware/auth/validatorRecoverPwd");
const refresh_1 = require("../controllers/authControllers/refresh");
const basicAuth_1 = require("../controllers/authControllers/basicAuth");
const sendEmail_1 = require("../controllers/authControllers/sendEmail");
const verify_1 = require("../controllers/authControllers/verify");
const recoverPwd_1 = require("../controllers/authControllers/recoverPwd");
const validatorSendEmail_1 = require("../middleware/auth/validatorSendEmail");
const time_1 = require("../constants/time");
const router = (0, express_1.default)();
router.get("/refresh", (0, asyncWrapper_1.asyncWrapper)(refresh_1.refreshToken));
router.post("/register", validateRegister_1.validatorRegister, (0, asyncWrapper_1.asyncWrapper)(basicAuth_1.registerUser));
router.post("/login", (0, makeLimiter_1.makeLimiter)({ max: 5 }), validateLogin_1.validatorLogin, (0, asyncWrapper_1.asyncWrapper)(basicAuth_1.loginUser));
router.post("/logout", (0, asyncWrapper_1.asyncWrapper)(basicAuth_1.logoutUser));
router.post("/send-email", (0, makeLimiter_1.makeLimiter)({ max: 5, ms: time_1.HOUR }), validatorSendEmail_1.validatorSendEmail, (0, asyncWrapper_1.asyncWrapper)(sendEmail_1.sendEmailUser));
router.post("/verify-account", (0, makeLimiter_1.makeLimiter)({ max: 5, ms: time_1.HOUR }), validatorVerify_1.validatorVerify, (0, asyncWrapper_1.asyncWrapper)(verify_1.verifyAccount));
router.post("/verify-recover-pwd", (0, makeLimiter_1.makeLimiter)({ max: 5, ms: time_1.HOUR }), validatorVerify_1.validatorVerify, (0, asyncWrapper_1.asyncWrapper)(verify_1.verifyRecoverPwd));
router.patch("/recover-pwd", validatorRecoverPwd_1.validatorRecoverPwd, (0, asyncWrapper_1.asyncWrapper)(recoverPwd_1.recoverPwd));
exports.default = router;
